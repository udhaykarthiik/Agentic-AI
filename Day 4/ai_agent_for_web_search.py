# -*- coding: utf-8 -*-
"""Ai Agent for web-search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SS4EBqO44arjF1WFXDnIoKBJ_lbKZOHB
"""

!pip install google-generativeai tavily-python

# Install required libraries in Google Colab
!pip install google-generativeai tavily-python

import os
import google.generativeai as genai
from tavily import TavilyClient
from typing import List, Dict
import json

# Set up API keys (replace with your actual keys)
# For security, it's better to use Colab's secret storage or input prompts
GEMINI_API_KEY = "AIzaSyDCPZvnagJobQ4Ne-a3XGKXjPHn5uD42gw"  # Replace with your Gemini API key
TAVILY_API_KEY = "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"  # Replace with your Tavily API key

# Configure Gemini API
genai.configure(api_key=GEMINI_API_KEY)

# Initialize Tavily client
tavily = TavilyClient(api_key=TAVILY_API_KEY)

class ReActAgent:
    def __init__(self, topic: str, model_name: str = "gemini-1.5-flash"):
        """
        Initialize the ReAct agent with a topic and Gemini model.

        Args:
            topic (str): The research topic.
            model_name (str): The Gemini model to use.
        """
        self.topic = topic
        self.model = genai.GenerativeModel(model_name)
        self.research_questions = []
        self.research_data = {}

    def generate_research_questions(self) -> List[str]:
        """
        Use Gemini to generate 5-6 research questions based on the topic.

        Returns:
            List[str]: List of research questions.
        """
        prompt = f"""
        You are an expert researcher. For the topic "{self.topic}", generate 5-6 well-structured research questions that cover different aspects of the topic. Ensure the questions are specific, relevant, and diverse. Return the questions as a numbered list in plain text.
        """
        try:
            response = self.model.generate_content(prompt)
            questions = response.text.strip().split("\n")
            self.research_questions = [q.strip() for q in questions if q.strip()]
            return self.research_questions
        except Exception as e:
            print(f"Error generating questions: {e}")
            return []

    def search_web(self, question: str) -> Dict:
        """
        Perform a web search for a given question using Tavily and extract relevant information.

        Args:
            question (str): The research question to search for.

        Returns:
            Dict: Search results with titles and content.
        """
        try:
            response = tavily.search(query=question, max_results=5)
            results = [
                {"title": result["title"], "content": result["content"]}
                for result in response["results"]
            ]
            return results
        except Exception as e:
            print(f"Error searching for {question}: {e}")
            return []

    def gather_information(self):
        """
        Search the web for each research question and store the results.
        """
        for question in self.research_questions:
            print(f"Searching for: {question}")
            results = self.search_web(question)
            self.research_data[question] = results

    def generate_report(self) -> str:
        """
        Compile a structured report based on the gathered information.

        Returns:
            str: The formatted report in markdown.
        """
        report = f"# Research Report: {self.topic}\n\n"
        report += "## Introduction\n"
        report += f"This report explores the topic of {self.topic} by addressing key research questions. The information is gathered from web searches and compiled to provide a comprehensive overview.\n\n"

        for question in self.research_questions:
            report += f"## {question}\n"
            results = self.research_data.get(question, [])
            if not results:
                report += "No information found.\n\n"
                continue
            for i, result in enumerate(results, 1):
                report += f"### Source {i}: {result['title']}\n"
                report += f"{result['content'][:500]}...\n\n"  # Limit content length for brevity

        report += "## Conclusion\n"
        report += f"This report provides a summary of findings on {self.topic} based on the generated research questions and web search results. Further research may be needed for deeper insights.\n"
        return report

def main():
    # Get topic from user
    topic = input("Enter the research topic (e.g., Climate Change): ").strip()

    # Initialize and run the agent
    agent = ReActAgent(topic)

    # Step 1: Generate research questions
    print("Generating research questions...")
    questions = agent.generate_research_questions()
    print("Research Questions:")
    for i, q in enumerate(questions, 1):
        print(f"{i}. {q}")

    # Step 2: Gather information
    print("\nGathering information from the web...")
    agent.gather_information()

    # Step 3: Generate report
    print("\nGenerating report...")
    report = agent.generate_report()

    # Save report to a markdown file
    with open("research_report.md", "w") as f:
        f.write(report)
    print("Report saved as 'research_report.md'")

    # Display report in Colab
    from IPython.display import Markdown, display
    display(Markdown(report))

if __name__ == "__main__":
    main()